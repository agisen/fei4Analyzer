#include "Plotter.h"

//==========================================CLUSTER TOT ANALYSIS=====================================
void Plotter::fillClusterPlots(Clusterizer::clusterMapDef &clusterMap)
{
  for(Clusterizer::clusterMapDef::iterator ev = clusterMap.begin(); ev!=clusterMap.end(); ++ev)
  {
    for(std::map<int, Clusterizer::clustersDef>::iterator chip=(*ev).second.begin(); chip!=(*ev).second.end(); ++chip)
    {
      if(clusterToT_.count((*chip).first)==0)
      {
        std::cout << "Making new histogram for chip: " << (*chip).first << std::endl;
        std::stringstream ss;
        ss.str("");
        ss << "chip"<< (*chip).first << "_Qdist";
 	clusterToT_[(*chip).first] = new TH1I(ss.str().c_str(),"ToT Distribution",50,0,50	) ;
 	ss.str("");
        ss << "chip"<< (*chip).first << "_QdistCS1";
 	one_hitToT_[(*chip).first] = new TH1I(ss.str().c_str(),"ToT Distribution CS1",50,0,50) ;
 	ss.str("");
 	ss << "chip"<< (*chip).first << "_QdistCS2";
 	two_hitToT_[(*chip).first] = new TH1I(ss.str().c_str(),"ToT Distribution CS2",50,0,50) ;
	ss.str("");
	ss << "chip"<< (*chip).first << "_QdistCS2_LR";
	totMax_[(*chip).first] = new TH1I(ss.str().c_str(),"ToT Max Distribution CS2",50,0,50) ;
	ss.str("");
 	ss << "chip"<< (*chip).first << "_QdistCS2_UD";
 	totMin_[(*chip).first] = new TH1I(ss.str().c_str(),"ToT Min Distribution CS2",50,0,50) ;
 	ss.str("");
 	ss << "chip"<< (*chip).first << "_CSdist";
 	clusterSize_[(*chip).first]= new TH1I(ss.str().c_str(),"Cluster Size Distribution",11,1,10);
	ss.str("");
 	ss << "chip"<< (*chip).first << "_CSdistRow";
 	clusterSizeRow_[(*chip).first]= new TH1I(ss.str().c_str(),"Cluster Size Distribution Rows",11,1,10);
        ss.str("");
 	ss << "chip"<< (*chip).first << "_CSdistCol";
 	clusterSizeCol_[(*chip).first]= new TH1I(ss.str().c_str(),"Cluster Size Distribution Cols",11,1,10);
	ss.str("");
 	ss << "chip"<< (*chip).first << "_clusterMap_cs1";
 	clusterMap_cs1_[(*chip).first]= new TH2I(ss.str().c_str(),"Cluster Map CS1",500,0,500,500,0,500);
	ss.str("");
 	ss << "chip"<< (*chip).first << "_clusterMap_cs2";
 	clusterMap_cs2_[(*chip).first]= new TH2I(ss.str().c_str(),"Cluster Map CS2",500,0,500,500,0,500);
	ss.str("");
        ss << "chip"<< (*chip).first << "_clusterTotMap_cs2";
 	clusterTotMap_cs2_[(*chip).first]= new TH2D(ss.str().c_str(),"Cluster Tot Map CS2",1000,0,500,1000,0,500);
      }
      
      for( Clusterizer::clustersDef::iterator clus=(*chip).second.begin(); clus!=(*chip).second.end(); ++clus )
      {
    	 int cToT=0;
	 int maxRow, maxCol, minRow, minCol, maxRowTot, minRowTot , maxColTot, minColTot, maxTot, minTot;
	 maxRow=minRow= (*clus).second[0].row;
	 maxCol=minCol= (*clus).second[0].col;
	 maxTot=minTot=minRowTot=maxRowTot=maxColTot=minColTot=(*clus).second[0].tot;
	 unsigned int cSize = (*clus).second.size();
	 
	 for(unsigned int hit=0; hit<cSize; hit++)
    	 {
	   int& tot=(*clus).second[hit].tot;
    	   cToT+=tot;
           if( (*clus).second[hit].row > maxRow ) 
	   {
	     maxRow = (*clus).second[hit].row;
	     maxRowTot = (*clus).second[hit].tot;
	   }
	   if( (*clus).second[hit].row < minRow ) 
	   {
	     minRow = (*clus).second[hit].row;
	     minRowTot = (*clus).second[hit].tot;
	   }
	   if( (*clus).second[hit].col > maxCol ) 
	   {
	     maxCol = (*clus).second[hit].col;
	     maxColTot = (*clus).second[hit].tot;
	   }
	   if( (*clus).second[hit].col < minCol ) 
	   {
	     minCol = (*clus).second[hit].col;
	     minColTot = (*clus).second[hit].tot;
	   }
	   if(tot>maxTot) maxTot=tot;
	   if(tot<minTot) minTot=tot;
	   
	   if(cSize==1) clusterMap_cs1_[(*chip).first]->Fill((*clus).second[hit].col, (*clus).second[hit].row);
	   if(cSize==2) 
	   { 
	      clusterMap_cs2_[(*chip).first]->Fill((*clus).second[hit].col, (*clus).second[hit].row);
	      //if(cTot) clusterTotMap_cs2_[(*chip).first]->Fill()
	   }
    	 }
    	 if(cSize!=0)  
	 {
	    clusterSize_[(*chip).first]->Fill(cSize);
	    clusterSizeRow_[(*chip).first]->Fill( maxRow-minRow+1 );
	    clusterSizeCol_[(*chip).first]->Fill( maxCol-minCol+1 );
	 }
    	 else std::cout << "WARNING: cluster size 0" << std::endl;
	 
	 if(cSize==2)
	 {				
	   if(maxRow==minRow)
	   {	  
	     totMax_[(*chip).first]->Fill(maxTot);
	   }
	   else
	   {
	     totMin_[(*chip).first]->Fill(minTot);
	   }
	   
	   if( (maxTot-minTot)<0 ) clusterTotMap_cs2_[(*chip).first]->Fill((maxCol+minCol)*0.5,(maxRow+minRow)*0.5);				   
	 }
	 				  
         clusterToT_[(*chip).first]->Fill(cToT);
    	 if( cSize==1 ) one_hitToT_[(*chip).first]->Fill(cToT);
    	 if( cSize==2 ) two_hitToT_[(*chip).first]->Fill(cToT);
      }
 
    }
  }
  
}
  
//============================================
void Plotter::fillHitPlots(EventMaker::hitMapDef& hitMap)
{
  for(EventMaker::hitMapDef::iterator ev = hitMap.begin(); ev!=hitMap.end(); ++ev)
  {
    for(std::map<int, EventMaker::hitsDef>::iterator chip=(*ev).second.begin(); chip!=(*ev).second.end(); ++chip)
    {
      if(hitMap_.count((*chip).first)==0)
      {
        std::cout << "Making new histogram for chip: " << (*chip).first << std::endl;
 	ss_.str("");
	ss_ << "chip"<< (*chip).first << "_HitMap";
 	hitMap_[(*chip).first]= new TH2I(ss_.str().c_str(), ss_.str().c_str(),500,0,500,500,0,500);
      }
 
      for(unsigned int h=0; h<(*chip).second.size(); h++)
      {
        hitMap_[(*chip).first]->Fill((*chip).second[h].col, (*chip).second[h].row);
      }
 
    }
  }
  
} 
  //=========================WRITEOUT HISTOS=========================================
void Plotter::writePlots(std::string rootFileName)
{
  TFile outRootFile(rootFileName.c_str(),"recreate");
  for(std::map<int, TH1I*>::iterator it=clusterToT_.begin(); it!=clusterToT_.end(); ++it)
  {
    (*it).second->Write();
    two_hitToT_[(*it).first]->Write();
    one_hitToT_[(*it).first]->Write();
    clusterSize_[(*it).first]->Write();
    clusterSizeRow_[(*it).first]->Write();
    clusterSizeCol_[(*it).first]->Write();
    totMax_[(*it).first]->Write();
    totMin_[(*it).first]->Write();
    hitMap_[(*it).first]->Write();
    clusterMap_cs1_[(*it).first]->Write();
    clusterMap_cs2_[(*it).first]->Write();
    clusterTotMap_cs2_[(*it).first]->Write();
  }
  outRootFile.Close();
}
